<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
        <title>Catch: A User Manual</title>
        <style type="text/css">
pre {
    border: 2px solid gray;
    padding: 1px;
    padding-left: 5px;
    margin-left: 10px;
    background-color: #eee;
}

pre.define {
    background-color: #ffb;
    border-color: #cc0;
}

body {
    font-family: sans-serif;
}

h1, h2, h3 {
    font-family: serif;
}

h1 {
    color: rgb(23,54,93);
    border-bottom: 1px solid rgb(79,129,189);
    padding-bottom: 2px;
    font-variant: small-caps;
    text-align: center;
}

a {
    color: rgb(54,95,145);
}

h2 {
    color: rgb(54,95,145);
}

h3 {
    color: rgb(79,129,189);
}
        </style>
    </head>
    <body>

<h1>Catch: A User Manual</h1>

<p style="text-align:right;margin-bottom:25px;">
    by <a href="http://community.haskell.org/~ndm/">Neil Mitchell</a>
</p>

<p>
    Catch is a tool for checking that a piece of Haskell code does not have any inexhaustive pattern matches, and will not fail at runtime with a pattern match error. For the purposes of Catch, the includes things like passing the empty list to <tt>head</tt>, or division by zero.
</p>
<p>
    This document proceeds as follows:
</p>
<ol>
    <li>Obtaining and Installing Catch</li>
    <li>A Walkthrough of Risers</li>
    <li>Running Your Example</li>
    <li>Reading Constraints</li>
    <li>Flag Reference</li>
    <li>Limitations</li>
</ol>

<h3>Acknowledgements</h3>

<p>
    Thanks to Colin Runciman, Malcolm Wallace, Matt Naylor, Tom Shackell and everyone in PLASMA for useful feedback.
</p>


<h2>Obtaining and Installing Catch</h2>

<h3>Installing Yhc</h3>

<p>
    Catch has Yhc as a dependency, so before installing Catch you must first install Yhc. See <a href="http://haskell.org/haskellwiki/Yhc">this page</a> for details of installation. Once you have installed Yhc, add it to your search path so that the <tt>yhc</tt> command is available and can compile files.
</p>
<p>
	If you aren't able to compile Yhc in its entirity, then the following is sufficient:
</p>
<pre>
scons build yhc
scons build libraries
</pre>

<h3>Installing Catch</h3>

<p>
    Take a Catch tarball, and unpack. Then invoke the standard Cabal magic:
</p>
<pre>
runhaskell Setup configure
runhaskell Setup build
runhaskell Setup install
</pre>

<h2>A Walkthrough of Risers</h2>

<p>
	This section describes how to run the example Risers program.
</p>
<p>
	Open the command line and type:
</p>
<pre>
catch Risers
</pre>
<p>
	Note that it goes through various stages, and comes to the answer at the end
</p>
<pre>
Answer: _
</pre>
<p>
	Think of this answer as a pattern match, _ means that regardless of the inputs to Risers, it will not crash.
</p>


<h2>Running Your Example</h2>

<p>
	This is intended to be a basic overview of the recommended best practice for trying a new example with Catch.
</p>
<p>
	First find your code, something under 500 lines is probably best - start small (10 lines) and work your way up. Remember that even a 2 line program may pull in 1000's of lines of libraries, so do not think of program size as an absolute.
</p>
<p>
	Your code should either be a program with a <tt>main</tt> function, or a library with an export list (restricted to one module deep names currently). If you wish to check a fragment which does not have <tt>main :: IO ()</tt>, then name the module something else.
</p>
<p>
	Next check that Yhc is able to compile your code, if it cannot then fix either the code or Yhc until you have success.
</p>
<p>
	Now check the program by typing <tt>catch <i>testname</i></tt>. To take a program such as <a href="http://www.cs.york.ac.uk/fp/darcs/hscolour/">HsColour</a>, we would get:
</p>
<pre>
Checking [1/5]: Language.Haskell.HsColour.Classify: Pattern match failure in fun
ction at 56:1-63:26.
Partial: "Language.Haskell.HsColour.Classify.nestcomment.4"
Partial: "Language.Haskell.HsColour.Classify.nestcomment"
Partial: "Language.Haskell.HsColour.Classify.nestcomment.5"
Answer: _
Checking [2/5]: PreludeList.foldr1: empty list
Partial: "Prelude.fold$292"
Answer: _
Checking [3/5]: PreludeList.head: empty list
Partial: "Prelude.head"
Partial: "Language.Haskell.HsColour.Classify.chunk.6"
Partial: "Main.Main.Prelude.319.useDefault$269.1"
Partial: "Main.Main.Prelude.319.useDefault$710.1"
Answer: _
Checking [4/5]: PreludeList.last: empty list
Partial: "Prelude.last"
Partial: "Main.Main.Prelude.313.writeResult$283.1"
Answer: _
Checking [5/5]: PreludeList.tail: empty list
Partial: "Prelude.tail"
Partial: "Language.Haskell.HsColour.Classify.chunk.6"
Answer: _
Checking whole program
Answer: _
</pre>
<p>
	Each "Checking" output corresponds to the error message the user would see at runtime if this pattern was invoked. For example, the second would give an error message about foldr1 being on an empty list - which clearly shows where the problem is. Functions often have specialised variants generated, Prelude.fold$30 is one of these - which comes from foldr originally.
</p>
<p>
	Another example is the third error message. Here the function <tt>head</tt> has transmitted a precondition to <tt>useDefault</tt>, which is defined in module <tt>Main</tt>. The precondition extends no further than this though, so will never occur in practice.
</p>
<p>
	We can examine the <tt>useDefault</tt> function more closely, we can find its original definition in HsColour:
</p>
<pre>
useDefault d f list | null list = d
                    | otherwise = f (head list)
</pre>
<p>
	And if we turn on the <tt>--dcore</tt> flag to Catch, we can take a look at <tt>ycr/HsColour.6.ShortCtors.txt</tt>, which gives the functions relating to <tt>useDefault</tt> just before analysis. Another option is to look at the <tt>LetElim</tt> file, which is a close match to the original code:
</p>
<pre>
Main.Main.Prelude.311.useDefault$24 v1 v4 =
    Main.Main.Prelude.311.useDefault$24.1 (Prelude.null v4) v1 v4

Main.Main.Prelude.311.useDefault$24.1 v2 v1 v4 =
    case v2 of
        Prelude.True -> v1
        Prelude.False -> Prelude.head v4

Main.Main.Prelude.311.useDefault$93 v1 v2 v8 v9 v10 =
    Main.Main.Prelude.311.useDefault$93.1
      (Prelude.null v1)
      v10
      v2
      v8
      v9
      v1

Main.Main.Prelude.311.useDefault$93.1 v3 v10 v2 v8 v9 v1 =
    case v3 of
        Prelude.True -> Main.Main.Prelude.307.ttyInteract$94 v2 v8 v9 v10
        Prelude.False ->
            Main.Main.Prelude.306.fileInteract$262
              (Prelude.head v1)
              v2
              v8
              v9
              v10
</pre>
<p>
	Both versions have been specialised, with functional arguments frozen in - <tt>id</tt> for <tt>useDefault$24</tt> and <tt>fileInteract</tt> for <tt>useDefault$93</tt>. Focusing on the simpler of these two (<tt>$24</tt>), we can see that <tt>useDefault$24.1</tt> is potentially unsafe, as Catch told us. We can also see that its call is safe, as Catch also said.
</p>
<p>
	When tracking down an error, I typically look at the partial list, find the first function in that list that should not be there, and go there to find where the error is likely to be.
</p>


<h2>Reading Constraints</h2>

<p>
	Here are some sample constraints, and their meanings. This section could probably do with being expanded.
</p>
<ul>
	<li><b>_</b> Anything is safe.</li>
	<li><b>0</b> Nothing is safe.</li>
	<li><b>{True}</b> Must be the constructor True.</li>
	<li><b>{[]}</b> Must be the constructor [].</li>
	<li><b>{Just {True}} | {Nothing}</b> Must be Just True or Nothing.</li>
	<li><b>{#2 _ {True}}</b> The function takes 2 arguments, the second must be True.</li>
	<li><b>{: _ * _}</b> Must be the constructor (:). The first _ is the restriction on the head, the * is merely a separator, and the second _ is the restriction on all tails.</li>
	<li><b>{: {True} * {: {True} | []}} | []</b> Must be a list of any size, with True for all elements.</li>
</ul>
<p>
	Catch could probably do with writing its constraints in some human friendly way - although quite what form this would take is still unclear. Counter example generation is likely to be useful, and is on the todo list.
</p>


<h2>Command Line Reference</h2>

<p>
	The command line structure for Catch interprets any argument begining with a - (hyphen) as an argument, and any others as a file. Arguments may occur in any order.
</p>

<h3>Specifying Files</h3>

<p>
	You may specify any one of:
</p>
<ul>
	<li><b>.hs/.lhs</b> Treated as a Haskell file, and compiled using Yhc. If no extension is given, this extension is infered.</li>
	<li><b>.txt</b> A text file, listing files to analyse one per line.</li>
	<li><b>Directory</b> A directory of .hs/.lhs files, all which be analysed separately.</li>
</ul>
<p>
	Files are searched for in the current directory and in <tt>%CATCH_BASE_PATH%/examples/*/</tt>. This allows the standard examples to be executed by Catch without worrying about directories etc.
</p>

<h3>Options</h3>

<pre>
Standard options:
  -v           --version            show version number
  -h, -?       --help               show help message
  -q           --quiet              final results only
  -t[SECONDS]  --timeout[=SECONDS]  timeout per error, 0=inf
  -s N,M       --skip=N,M           list of errors to skip
  -y flags     --yhc=flags          extra flags to give to Yhc

Debug options:
               --dlog               ouptput property/precondition logs
               --dcore              output intermediate Yhc.Core files
               --dtime              display CPU time
               --dmemory            display memory useage
               --dprofile           run with profiling
</pre>


<h2>Limitations</h2>

<p>
	Catch is still very much alpha software, and may be delicate from time to time.
</p>

<ul>
	<li>
		<b>IO errors</b> Several IO operations can raise "errors", which semantically are _|_, Catch will not detect these. Examples include <tt>readFile</tt>, <tt>getEnv</tt>, <tt>createDirectory</tt> etc.
	</li>
	<li>
		<b>Missing libraries</b> Some programs may import libraries that Catch does not support. In actual fact, these are missing from Yhc which Catch requires - adding them to Yhc will fix your problem.
	</li>
	<li>
		<b>Firstifier non-terminates</b> Some programs will not terminate in the firstifier. If the program has this behaviour, email it to me. There are a few known cases of this, which are being investigated.
	</li>
	<li>
		<b>Analysis takes forever</b> This is unlikely, but it may well take a very long time. Adding either <tt>--skip</tt> or <tt>--timeout</tt> can be used to ignore this particular error.
	</li>
	<li>
		<b>Timeout does not work</b> Not sure why, but I have very limited success with the timeout flag.
	</li>
</ul>

<p>
	The larger the program, the more likely that Catch will run into one of these issues - however a large program in itself will not cause any issues.
</p>

    </body>
</html>
